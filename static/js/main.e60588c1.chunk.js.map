{"version":3,"sources":["DisplayItems.js","App.js","serviceWorker.js","index.js"],"names":["DisplayItems","props","displayitems","items","map","item","react_default","a","createElement","className","key","type","id","value","text","onChange","e","setUpdate","target","index_es","icon","onClick","deleteItem","react_flip_move_es","duration","easing","library","add","faTrash","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentItem","doSomething","bind","assertThisInitialized","addItem","setState","Date","now","preventDefault","newItem","newItems","concat","toConsumableArray","findItems","filter","onSubmit","placeholder","src_DisplayItems","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e60588c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './DisplayItems.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction DisplayItems(props){\r\n    const items = props.items;\r\n    const displayitems = items.map(item =>{\r\n        return <div className=\"display\" key={item.key}>\r\n            <p>\r\n                <input type=\"text\" \r\n                id={item.key}\r\n                value={item.text}\r\n                onChange={\r\n                    (e)=>{\r\n                        props.setUpdate(e.target.value, item.key)\r\n                    }\r\n                }\r\n                />  \r\n                <span> <FontAwesomeIcon className='faicons' icon='trash' onClick={()=>{props.deleteItem(item.key)}}/></span></p>\r\n           \r\n        </div>\r\n    })\r\n    return(\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {displayitems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayItems;","import React from 'react';\nimport DisplayItems from './DisplayItems.js';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nimport './App.css';\n\nlibrary.add(faTrash);\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.doSomething = this.doSomething.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n\n  }\n  doSomething(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !== \"\"){\n      const newItems = [...this.state.items,newItem];\n      this.setState({\n        items: newItems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      }) \n    }\n  }\n  deleteItem(key){\n    const findItems = this.state.items.filter(item=>\n      item.key!==key\n    );\n    this.setState({\n      items:findItems\n    })\n  }\n  setUpdate(text,key){\n    const items = this.state.items;\n    items.map(item=>{\n      if(item.key === key){\n        item.text = text;\n      }\n  \n    })\n    this.setState({\n      items:items\n    })\n  }\n  render(){\n    return (\n        \n    <div className=\"topside\">\n      <div className=\"title\">\n        Simple React UI CRUD\n      </div>\n      <header>\n          <form id=\"myform\" onSubmit={this.addItem}>\n            <input type=\"text\"  placeholder=\"Add item\"\n            value={this.state.currentItem.text}  \n            onChange={this.doSomething}/>\n            <button type=\"submit\">Add</button>\n          </form>\n      </header>\n      <div className=\"itemside\">\n      <DisplayItems items={this.state.items}\n      deleteItem = {this.deleteItem}\n      setUpdate = {this.setUpdate}></DisplayItems>\n      </div>\n    </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}